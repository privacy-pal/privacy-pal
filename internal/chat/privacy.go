// Code generated by "genpal -mode=yamlspec -input=internal/chat/privacypal.yaml -output=internal/chat/privacy.go"

package chat

import (
	"cloud.google.com/go/firestore"
	pal "github.com/privacy-pal/privacy-pal/pkg"
)

func (u *User) HandleAccess(dataSubjectId string, currentDataNodeLocator pal.Locator) map[string]interface{} {
	data := make(map[string]interface{})

	data["Name"] = u.Name
	data["Groupchats"] = make([]pal.Locator, 0)
	for _, id := range u.GCs {
		data["Groupchats"] = append(data["Groupchats"].([]pal.Locator), pal.Locator{
			Type:           pal.Document,
			CollectionPath: []string{"gcs"},
			DocIDs:         []string{id},
			NewDataNode:    func() pal.DataNode { return &GroupChat{} },
		})
	}

	return data
}

func (u *User) HandleDeletion(dataSubjectId string) (nodesToTraverse []pal.Locator, deleteNode bool, fieldsToUpdate []firestore.Update) {
	return nil, false, nil
}

func (g *GroupChat) HandleAccess(dataSubjectId string, currentDataNodeLocator pal.Locator) map[string]interface{} {
	data := make(map[string]interface{})

	data["Messages"] = pal.Locator{
		Type:           pal.Collection,
		CollectionPath: append(currentDataNodeLocator.CollectionPath, "messages"),
		DocIDs:         currentDataNodeLocator.DocIDs,
		NewDataNode:    func() pal.DataNode { return &Message{} },
		Queries: []pal.Query{
			{
				Path:  "userId",
				Op:    "==",
				Value: dataSubjectId,
			},
		},
	}

	return data
}

func (g *GroupChat) HandleDeletion(dataSubjectId string) (nodesToTraverse []pal.Locator, deleteNode bool, fieldsToUpdate []firestore.Update) {
	return nil, false, nil
}

func (m *Message) HandleAccess(dataSubjectId string, currentDataNodeLocator pal.Locator) map[string]interface{} {
	data := make(map[string]interface{})

	data["Content"] = m.Content
	data["Timestamp"] = m.Timestamp

	return data
}

func (m *Message) HandleDeletion(dataSubjectId string) (nodesToTraverse []pal.Locator, deleteNode bool, fieldsToUpdate []firestore.Update) {
	return nil, false, nil
}
